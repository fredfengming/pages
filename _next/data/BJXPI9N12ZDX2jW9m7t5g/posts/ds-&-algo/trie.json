{"pageProps":{"post":{"path":"ds-&-algo/trie","title":"Trie","excerpt":"Trie is a tree data structure with an index on each node, it is efficient for searching, and its indices compresses memory space as well","dateIsoString":"2020-03-16T05:35:07.322Z","coverImagePath":null,"content":"\n# Trie\n\nBelow is an method that builds Trie for alphabet char-based indices.\n\n```java\nclass TrieNode {\n    boolean isWord;\n    TierNode[] children = new TrieNode[26];\n}\n\nprivate void buildTrieTree(TrieNode root, String word){\n    TrieNode cur = root;\n    for(int i=0;i<word.length();i++){\n        char ch = word.charAt(i);\n        int index = ch - 'a';\n        if(cur.children[index]==null){\n            cur.children[index] = new TrieNode();\n        }\n        cur = cur.children[index];\n    }\n    cur.isWord = true;\n}\n```\n"},"recentPostLinks":[{"text":"位操作","href":"/posts/ds-&-algo/bit-manipulation"},{"text":"并查集(Disjoint Set)学习笔记","href":"/posts/ds-&-algo/disjoint-set"},{"text":"排序算法学习笔记","href":"/posts/ds-&-algo/sort"},{"text":"Mermaid","href":"/posts/mermaid"},{"text":"Binary Indexed Tree","href":"/posts/ds-&-algo/binary-indexed-tree"},{"text":"动态规划例题","href":"/posts/ds-&-algo/dp"},{"text":"Trie","href":"/posts/ds-&-algo/trie"}],"utilLinks":[{"text":"Docker Command Builder","href":"/tools/docker"},{"text":"Kubectl Command Builder","href":"/tools/kubectl"}]},"__N_SSG":true}